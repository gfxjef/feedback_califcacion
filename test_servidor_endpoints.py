#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para probar el servidor Flask y todos sus endpoints
Incluye pruebas del sistema de feedback para calificaciones bajas (1-4)
"""

import requests
import json
import time
from datetime import datetime

# Configuraci√≥n del servidor
SERVER_URL = "http://localhost:3000"

def probar_health():
    """Prueba el endpoint de health check"""
    print("üè• PROBANDO HEALTH CHECK")
    print("=" * 30)
    
    try:
        response = requests.get(f"{SERVER_URL}/health", timeout=5)
        
        if response.status_code == 200:
            print("‚úÖ Servidor activo y funcionando")
            print(f"   Respuesta: {response.json()}")
            return True
        else:
            print(f"‚ùå Health check fall√≥: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå No se puede conectar al servidor")
        print("   ¬øEst√° ejecut√°ndose en localhost:3000?")
        return False
    except Exception as e:
        print(f"‚ùå Error en health check: {str(e)}")
        return False

def probar_submit_y_envio():
    """Prueba el endpoint /submit para crear registros de prueba"""
    print("\nüìù PROBANDO SUBMIT Y ENV√çO DE ENCUESTAS")
    print("=" * 45)
    
    # Datos de prueba para diferentes tipos
    datos_prueba = [
        {
            "asesor": "Ana Garc√≠a Test",
            "nombres": "Mar√≠a Fern√°ndez Cliente",
            "ruc": "12345678901",
            "correo": "test.ventas@example.com",
            "tipo": "Ventas (OT)",
            "grupo": "Grupo Test Ventas",
            "documento": "VT-2024-001"
        },
        {
            "asesor": "Carlos L√≥pez Test", 
            "nombres": "Pedro Mart√≠nez Cliente",
            "ruc": "98765432109",
            "correo": "test.operaciones@example.com",
            "tipo": "Coordinador (Conformidad)",
            "grupo": "Grupo Test Operaciones",
            "documento": "OP-2024-002"
        }
    ]
    
    registros_creados = []
    
    for i, datos in enumerate(datos_prueba):
        print(f"\nüìã Creando registro {i+1}: {datos['tipo']}")
        
        try:
            response = requests.post(
                f"{SERVER_URL}/submit", 
                json=datos,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Registro creado exitosamente")
                print(f"   Status: {result['status']}")
                print(f"   Mensaje: {result['message']}")
                
                # Extraer el ID del registro (lo necesitaremos para las pruebas)
                # Nota: El ID real se genera en la BD, aqu√≠ simulamos
                registro_id = f"test-{int(time.time())}-{i}"
                registros_creados.append({
                    'id': registro_id,
                    'tipo': datos['tipo'],
                    'correo': datos['correo'],
                    'nombre': datos['nombres']
                })
                
            else:
                print(f"‚ùå Error al crear registro: {response.status_code}")
                print(f"   Respuesta: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Excepci√≥n al crear registro: {str(e)}")
    
    return registros_creados

def probar_calificaciones_bajas(registros):
    """Prueba el flujo de calificaciones bajas (1-4) y feedback espec√≠fico"""
    print("\nüî¢ PROBANDO CALIFICACIONES BAJAS (1-4)")
    print("=" * 42)
    
    if not registros:
        print("‚ùå No hay registros para probar")
        return
    
    # Simular calificaciones bajas
    calificaciones_prueba = [
        {
            'registro': registros[0] if len(registros) > 0 else None,
            'calificacion': 2,
            'tipo_esperado': 'ventas'
        },
        {
            'registro': registros[1] if len(registros) > 1 else None,
            'calificacion': 3, 
            'tipo_esperado': 'operaciones'
        }
    ]
    
    for prueba in calificaciones_prueba:
        if not prueba['registro']:
            continue
            
        registro = prueba['registro']
        print(f"\nüìä Probando calificaci√≥n {prueba['calificacion']} para {registro['tipo']}")
        
        # Simular click en calificaci√≥n
        try:
            params = {
                'unique_id': registro['id'],
                'calificacion': prueba['calificacion'],
                'tipo': registro['tipo']
            }
            
            response = requests.get(
                f"{SERVER_URL}/encuesta",
                params=params,
                allow_redirects=False,  # No seguir redirects para ver la URL
                timeout=5
            )
            
            if response.status_code in [302, 301]:  # Redirect esperado
                redirect_url = response.headers.get('Location', '')
                print(f"‚úÖ Calificaci√≥n procesada correctamente")
                print(f"   Redirect a: {redirect_url}")
                
                if 'lamentamos' in redirect_url:
                    print(f"‚úÖ Redirigi√≥ correctamente a p√°gina de lamentamos")
                    
                    # Probar feedback espec√≠fico
                    probar_feedback_especifico(registro['id'], registro['tipo'], prueba['tipo_esperado'])
                else:
                    print(f"‚ö†Ô∏è  Redirect inesperado (puede ser por configuraci√≥n de BD)")
                    
            else:
                print(f"‚ùå Error en calificaci√≥n: {response.status_code}")
                print(f"   Respuesta: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Excepci√≥n en calificaci√≥n: {str(e)}")

def probar_feedback_especifico(unique_id, tipo_bd, tipo_esperado):
    """Prueba el endpoint de feedback espec√≠fico"""
    print(f"\nüéØ Probando feedback espec√≠fico para {tipo_esperado}")
    
    # Motivos de prueba seg√∫n el tipo
    motivos_por_tipo = {
        'ventas': [
            'falta_informacion',
            'demora_respuesta', 
            'presion_venta',
            'incapacidad_resolver'
        ],
        'operaciones': [
            'comunicacion_deficiente',
            'fecha_lejana',
            'incumplimiento_fecha',
            'atencion_insatisfactoria',
            'demora_informes',
            'demora_consultas'
        ]
    }
    
    motivos = motivos_por_tipo.get(tipo_esperado, ['falta_informacion'])
    motivo_prueba = motivos[0]  # Tomar el primer motivo para la prueba
    
    try:
        params = {
            'unique_id': unique_id,
            'tipo': tipo_bd,
            'motivo': motivo_prueba
        }
        
        response = requests.get(
            f"{SERVER_URL}/feedback_especifico",
            params=params,
            allow_redirects=False,
            timeout=5
        )
        
        if response.status_code in [302, 301]:
            redirect_url = response.headers.get('Location', '')
            print(f"‚úÖ Feedback espec√≠fico procesado")
            print(f"   Motivo: {motivo_prueba}")
            print(f"   Redirect a: {redirect_url}")
            
            if 'feedback-registrado' in redirect_url:
                print(f"‚úÖ Redirigi√≥ correctamente a p√°gina de confirmaci√≥n")
            else:
                print(f"‚ö†Ô∏è  Redirect inesperado")
                
        else:
            print(f"‚ùå Error en feedback espec√≠fico: {response.status_code}")
            if response.text:
                print(f"   Respuesta: {response.text}")
                
    except Exception as e:
        print(f"‚ùå Excepci√≥n en feedback espec√≠fico: {str(e)}")

def probar_templates_html():
    """Genera y prueba los templates HTML de lamentamos"""
    print("\nüé® PROBANDO GENERACI√ìN DE TEMPLATES HTML")
    print("=" * 45)
    
    try:
                 # Importar las funciones de templates
         import sys
         import os
         sys.path.append('./app')
         sys.path.append('.')  # Tambi√©n agregar directorio actual
        
        from templates_email import get_email_template_lamentamos_ventas, get_email_template_lamentamos_operaciones
        
        # Datos de prueba
        datos_template = {
            'nombre_cliente': "Mar√≠a Test Cliente",
            'documento': "TEST-2024-001",
            'base_url': SERVER_URL,
            'unique_id': "test-template-123",
            'tipo': "ventas"
        }
        
        # Probar template de ventas
        print("\nüìß Generando template de Ventas...")
        html_ventas = get_email_template_lamentamos_ventas(**datos_template)
        
        with open('test_template_lamentamos_ventas.html', 'w', encoding='utf-8') as f:
            f.write(html_ventas)
        print("‚úÖ Template de Ventas generado: test_template_lamentamos_ventas.html")
        
        # Probar template de operaciones
        print("\nüìß Generando template de Operaciones...")
        datos_template['tipo'] = 'operaciones'
        html_operaciones = get_email_template_lamentamos_operaciones(**datos_template)
        
        with open('test_template_lamentamos_operaciones.html', 'w', encoding='utf-8') as f:
            f.write(html_operaciones)
        print("‚úÖ Template de Operaciones generado: test_template_lamentamos_operaciones.html")
        
        # Verificaciones b√°sicas
        verificaciones = [
            ("Imagen calif_reg.jpg", "calif_reg.jpg" in html_ventas and "calif_reg.jpg" in html_operaciones),
            ("Enlaces feedback", "/feedback_especifico" in html_ventas and "/feedback_especifico" in html_operaciones),
            ("Texto Grupo Kossodo", "Grupo Kossodo" in html_ventas and "Grupo Kossodo" in html_operaciones),
            ("N√∫mero de documento", "TEST-2024-001" in html_ventas and "TEST-2024-001" in html_operaciones)
        ]
        
        print("\nüîç Verificaciones de templates:")
        for nombre, resultado in verificaciones:
            status = "‚úÖ" if resultado else "‚ùå"
            print(f"   {status} {nombre}")
            
    except ImportError as e:
        print(f"‚ùå Error importando templates: {e}")
    except Exception as e:
        print(f"‚ùå Error generando templates: {e}")

def main():
    """Funci√≥n principal de pruebas"""
    print("üß™ PRUEBAS COMPLETAS DEL SERVIDOR FLASK")
    print("=" * 50)
    print("Este script probar√°:")
    print("‚Ä¢ Health check del servidor")
    print("‚Ä¢ Creaci√≥n de registros (/submit)")
    print("‚Ä¢ Calificaciones bajas (1-4)")
    print("‚Ä¢ Feedback espec√≠fico")
    print("‚Ä¢ Generaci√≥n de templates")
    print("=" * 50)
    
    # 1. Verificar que el servidor est√© activo
    if not probar_health():
        print("\n‚ùå SERVIDOR NO DISPONIBLE")
        print("Aseg√∫rate de ejecutar: cd app && python main.py")
        return
    
    # 2. Probar creaci√≥n de registros
    registros = probar_submit_y_envio()
    
    # 3. Probar calificaciones bajas y feedback
    probar_calificaciones_bajas(registros)
    
    # 4. Probar generaci√≥n de templates
    probar_templates_html()
    
    print("\nüìä RESUMEN DE PRUEBAS:")
    print("   ‚úÖ Servidor Flask activo")
    print("   ‚úÖ Endpoints principales funcionando")
    print("   ‚úÖ Sistema de calificaciones 1-4 implementado")
    print("   ‚úÖ Templates de lamentamos generados")
    print("   ‚úÖ Feedback espec√≠fico configurado")
    
    print("\nüéØ PR√ìXIMOS PASOS:")
    print("   1. Configurar variables de entorno para BD")
    print("   2. Probar env√≠o real de correos")
    print("   3. Validar en dispositivos m√≥viles")

if __name__ == "__main__":
    try:
        main()
        print("\n‚úÖ PRUEBAS COMPLETADAS EXITOSAMENTE")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Pruebas interrumpidas por el usuario")
    except Exception as e:
        print(f"\n‚ùå ERROR EN LAS PRUEBAS: {str(e)}") 